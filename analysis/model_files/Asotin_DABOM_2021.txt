model {

# Priors for detection probabilities 

	 GEORGC_p <- 0; # no detections / not in operation
	 ACBB0_p ~ dbeta(1, 1);
	 ACBA0_p ~ dbeta(1, 1);
	 CCAB0_p <- 0; # no detections / not in operation
	 CCAA0_p <- 0; # no detections / not in operation
	 AFCB0_p ~ dbeta(1, 1);
	 AFCA0_p ~ dbeta(1, 1);

# Priors for transition probabilities 

	 psi_ASOTIC[1, 1:n_branch_ASOTIC] ~ ddirch(ASOTIC_dirch_vec[1,]); 
	 psi_ASOTIC[2, 1:n_branch_ASOTIC] ~ ddirch(ASOTIC_dirch_vec[2,]); 

	 omega_ASOTIC[1, 1:n_branch_ASOTIC] <- zero_vec[1:(n_branch_ASOTIC)]; 
	 omega_ASOTIC[1, (n_branch_ASOTIC + 1)] <- 1; 

	 omega_ASOTIC[2, 1:n_branch_ASOTIC] <- psi_ASOTIC[1,]; 
	 omega_ASOTIC[2, (n_branch_ASOTIC + 1)] <- 0; 

	 omega_ASOTIC[3, 1:n_branch_ASOTIC] <- psi_ASOTIC[2,]; 
	 omega_ASOTIC[3, (n_branch_ASOTIC + 1)] <- 0; 

	 psi_ACB[1, 1:n_branch_ACB] ~ ddirch(ACB_dirch_vec[1,]); 
	 psi_ACB[2, 1:n_branch_ACB] ~ ddirch(ACB_dirch_vec[2,]); 

	 omega_ACB[1, 1:n_branch_ACB] <- zero_vec[1:(n_branch_ACB)]; 
	 omega_ACB[1, (n_branch_ACB + 1)] <- 1; 

	 omega_ACB[2, 1:n_branch_ACB] <- psi_ACB[1,]; 
	 omega_ACB[2, (n_branch_ACB + 1)] <- 0; 

	 omega_ACB[3, 1:n_branch_ACB] <- psi_ACB[2,]; 
	 omega_ACB[3, (n_branch_ACB + 1)] <- 0; 

# Where is each fish? 

	 for(i in 1:n_fish) { 


		 a_ASOTIC[i] ~ dcat( omega_ASOTIC[fish_type[i] + 1, 1:(n_branch_ASOTIC+1)] ) 
			 for (j in 1:n_branch_ASOTIC)	{ 
				 eta_ASOTIC[i,j] <- equals(a_ASOTIC[i],j) # equals(x,y) is a test for equality, returns [1,0] 
			 }

		 a_ACB[i] ~ dcat( omega_ACB[(eta_ASOTIC[i,1] * fish_type[i] + 1), 1:(n_branch_ACB+1)] ) 
			 for (j in 1:n_branch_ACB)	{ 
				 eta_ACB[i,j] <- equals(a_ACB[i],j) # equals(x,y) is a test for equality, returns [1,0] 
			 }

	} # end the n_fish loop 


# Were tags observed? 

	 for (i in 1:n_fish) {

		 cap_hist[i,1] ~ dbern( GEORGC_p * eta_ASOTIC[i,2] );

		 cap_hist[i,2] ~ dbern( ACBB0_p * eta_ASOTIC[i,1] );

		 cap_hist[i,3] ~ dbern( ACBA0_p * eta_ASOTIC[i,1] );

		 cap_hist[i,4] ~ dbern( CCAB0_p * eta_ACB[i,1] );

		 cap_hist[i,5] ~ dbern( CCAA0_p * eta_ACB[i,1] );

		 cap_hist[i,6] ~ dbern( AFCB0_p * eta_ACB[i,2] );

		 cap_hist[i,7] ~ dbern( AFCA0_p * eta_ACB[i,2] );

	}  # end the n_fish loop 
}
